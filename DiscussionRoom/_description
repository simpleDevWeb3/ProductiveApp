"""
F. Discussion Room Booking
A Discussion Room Booking allows users to
1. book a discussion for specific times.

It typically includes features like 
2. selecting a venue (Eg: Library or Cyber Centre), 
3. checking venue availability, 
4. entering booking details. 

After booking, the user shall be able to 
5. view the booking they have made.


string processing
file processing
"""

"""
def insertBook():
    id = idInputValidation("Book ID: ")
    name = input("Name  : ") 
    print("Publish date")
    date = dateInputValidation()
    publisher = input("Publisher: ")
    category = strInputValidation("Category: ")

    b = StoryBook(id, name, date, publisher, category)
    books.append(b)
"""

"""
def modifyBook(book):
    while True:
        menuMsg("Modify", "1. Name", "2. Publish Date", "3. Publisher", "4. Category", "0. Back")
        choice = intInputValidation(0, 4, "Enter no. :")

        match choice:
            case 1:
                book.name = input("Name  : ") 
            case 2:
                book.date = dateInputValidation()
            case 3:
                book.publisher = input("Publisher: ")
            case 4:
                book.category = strInputValidation("Category: ")
            case 0:
                break
"""



"""

def d(x = "--------"):
    print(f"------------------{x}-------------------")

def menuMsg(*args):
    d(f"{args[0]}")

    for x in range(1, len(args)):
        print(f"{args[x]}")

def strInputValidation(msg):
    while True:
        value = input(msg)

        if value.isalpha():
            return value
        else:
            print("Only alphbetic characters is allowed")

def intInputValidation(min, max, msg):
    while True:
        try:
            value = int(input(msg))
            if min <= int(value) <= max:
                return int(value)
            elif int(value) > max or int(value) < min:
                print(f"Please enter number between {min} and {max}")

        except ValueError:
            print("Please enter number.")

def idInputValidation(msg):
    value = input(msg)

    while True:
        if value[:3].isalpha() and value[3:].isdigit() and len(value) == 7:
            return value
        elif len(value) != 7:
            print("The maximum length of id is 7 characters.")
        else:
            print("Please follow the ID format, XXX1234.")

        value = input(msg)

def dateInputValidation():
    while True:
        try:
            m = intInputValidation(1, 12, "Month: ")
            d = intInputValidation(1, 31, "Day: ")
            date = datetime.date(YEAR, m, d)
            return date.strftime("%d-%m-%Y")
        except ValueError:
            print(f"{d}-{m}-{YEAR} is not a valid date.")

def timeInputValidation():
    h = intInputValidation(8, 17, "Hour: ")
    m = intInputValidation(0, 59, "Minustes: ")
    return datetime.time(h, m)

def viewDetails(room):
    while True:
        d("Room Details")
        print(room)

        menuMsg("",  "1 Book", "0 Back")
        choice = intInputValidation(0, 1, "Enter no. :")
        match choice:
            case 1:
                if room.status == False:
                    print("The room is unavailable")
                else:
                    bookingRoom(room)
                break
            case 0:
                break
                            
def viewRoom():
    back = False
    while not back:
        d("Room List")
        print(f"{'No.':<5s}{'ID':<10s}{'Name':<20s}{'Location':<20s}")

        for x in range(len(rooms)):
            print(f"{x + 1:<5d}{rooms[x].displayBrief()}")

        menuMsg("", f"\n1 - {len(rooms)} View details", "0 Back")
        choice = intInputValidation(0, len(rooms), "Enter no. :")
        match choice:
            case 0:
                back = True
            case _:
                viewDetails(rooms[choice - 1])

def bookingRoom(room):
    menuMsg("Booking", "Please enter the date:- ")
    date = dateInputValidation()
    while True:
        print("From Time: ")
        fromTime = timeInputValidation()
        print("To Time: ")
        toTime = timeInputValidation()
        time1 = datetime.datetime.combine(datetime.date.today(), fromTime)
        time2 = datetime.datetime.combine(datetime.date.today(), toTime)

        if (time2 - time1).total_seconds() / 60 <= 30:
            print("The minimum booking duration is 30 minutes")
        elif (time2 - time1).total_seconds() / 60 >= 120:
            print("The maximum booking duration is 2 hours")
        else:
            break 

    room.status = False
    history.append(BookingHistory(room, date, fromTime, toTime))

def returnKey():
    d("Return Room's Key'")
    print("Please enter the Room ID you want to return.")
    roomID = input("Room ID: ")

    roomIdFound = False
    for h in history:
        if h.room == roomID:
            print("Return successfully.")
            h.room.status = True
            roomIdFound = True
    
    if roomIdFound == False:
        print("Ambigious room ID entered.")

    roomIdFound = False

def bookingHistory():
    menuMsg("Booking History")
    for h in history:
        print("Stud ID.\tRoom ID.\tRoom Name\tLocation\tDate\tTime")
        print(h)

def main_cli():

    while True:
        menuMsg("Home Pge", "1. Room List", "2. Return Room's Key", "3. Booking History", "0. Exit")
        choice = intInputValidation(0, 3, "Enter no. :")
        
        match choice:
            case 1:
                viewRoom()
            case 2:
                returnKey()
            case 3:
                bookingHistory()
            case 0:
                break
"""